import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
df=pd.read_csv("emails.csv")
df.head()
X=df.drop(['Email No.','Prediction'],axis=1)
Y=df['Prediction']
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.33,random_state=44)

from sklearn.preprocessing import MinMaxScaler
sclr=MinMaxScaler()
X_train=sclr.fit_transform(X_train)
X_test=sclr.fit_transform(X_test)
from sklearn.neighbors import KNeighborsClassifier
classifier=KNeighborsClassifier(n_neighbors=5)
classifier.fit(X_train,y_train)
y_pred=classifier.predict(X_test)

import sklearn.metrics as metrics
mae=(metrics.mean_absolute_error(y_test,y_pred))*100
mse=(metrics.mean_squared_error(y_test,y_pred))*100
rmse=np.sqrt(mse)
accuracy=(metrics.accuracy_score(y_test,y_pred))*100

print("\n Mean Absolute Error{:.2f}".format(mae))
print("\n Mean Squared Error{:.2f}".format(mse))
print("\n Root mean squared Error{:.2f}".format(rmse))
print("\n Accuracy {:.2f}".format(accuracy))

from sklearn.svm import SVC
classifier1=SVC(kernel="rbf",random_state=1)
classifier1.fit(X_train,y_train)

y_pred1=classifier1.predict(X_test)
mae=(metrics.mean_absolute_error(y_test,y_pred1))*100
mse=(metrics.mean_squared_error(y_test,y_pred1))*100
rmse=np.sqrt(mse)
accuracy=(metrics.accuracy_score(y_test,y_pred1))*100

print("\n Mean Absolute Error{:.2f}".format(mae))
print("\n Mean Squared Error{:.2f}".format(mse))
print("\n Root mean squared Error{:.2f}".format(rmse))
print("\n Accuracy {:.2f}".format(accuracy))
